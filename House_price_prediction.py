# -*- coding: utf-8 -*-
"""Untitled59.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wwC2Km-CVNgO5_5kexPmamMhxEj1vIld

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Importing the dataset"""

dataset=pd.read_csv('Housing.csv')
shift=dataset.pop('parking')
dataset.insert(2, 'parking', shift)
Y=dataset.iloc[:,0].values
X=dataset.iloc[:,1:].values

"""Checking NULL values"""

if dataset.isnull().any().any():
  print('true')

"""Encoding the Categorical Values using Label Encoder"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X[:,9]=le.fit_transform(X[:,9])
le1=LabelEncoder()
X[:,5]=le1.fit_transform(X[:,5])
le2=LabelEncoder()
X[:,6]=le2.fit_transform(X[:,6])
le3=LabelEncoder()
X[:,7]=le3.fit_transform(X[:,7])
le4=LabelEncoder()
X[:,8]=le4.fit_transform(X[:,8])
le5=LabelEncoder()
X[:,10]=le5.fit_transform(X[:,10])

"""Encoding the Categorical variabels using OneHOTEncoding"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct=ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[11])],remainder='passthrough')
X=np.array(ct.fit_transform(X))

"""Printing the Header for cross checks"""

print(X[:15,])

"""NOTE : Furnishing status has came to the start on ONEHOTENCODING

Splitting the Dataset into Training and Test Set
"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=0)

print(X_train)

print(X_test)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
sc_y=StandardScaler()
X_train[:,3:8]=sc.fit_transform(X_train[:,3:8])
Y_train=sc_y.fit_transform(Y_train.reshape(-1,1))

"""Training the Multiple Linear Regression model on training Set"""

from sklearn.linear_model import LinearRegression
regressor=LinearRegression()
regressor.fit(X_train,Y_train)

"""Scaling the Test Set"""

X_test[:,3:8]=sc.transform(X_test[:,3:8])

"""Predicted values of Test Set"""

Y_pred=sc_y.inverse_transform((regressor.predict(X_test)).reshape(-1,1))

print(Y_pred)

"""Score of the Model"""

from sklearn.metrics import r2_score
r2_score(Y_test,Y_pred)